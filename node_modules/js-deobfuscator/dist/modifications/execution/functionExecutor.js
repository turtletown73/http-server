"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Shift = __importStar(require("shift-ast"));
const modification_1 = __importDefault(require("../../modification"));
const traverse_1 = require("../../helpers/traverse");
const executedFunction_1 = __importDefault(require("./executedFunction"));
const scope_1 = __importDefault(require("./scope"));
const traversalHelper_1 = __importDefault(require("../../helpers/traversalHelper"));
class FunctionExecutor extends modification_1.default {
    /**
     * Creates a new modification.
     * @param ast The AST.
     */
    constructor(ast) {
        super('Execute Functions', ast);
        this.scopeTypes = new Set(['Block', 'FunctionBody']);
        this.functionTypes = new Set(['FunctionDeclaration', 'FunctionExpression', 'ArrowExpression']);
        this.executedFunctions = [];
        this.globalScope = new scope_1.default(ast);
        this.foundExecutedFunction = false;
    }
    /**
     * Executes the modification.
     */
    execute() {
        this.findExecutedFunctions();
        if (this.foundExecutedFunction) {
            this.findAliases();
            this.replaceFunctionCalls();
        }
        this.removeFunctions();
    }
    /**
     * Finds all the executed functions.
     */
    findExecutedFunctions() {
        const self = this;
        let scope = this.globalScope;
        traverse_1.traverse(this.ast, {
            enter(node, parent) {
                if (self.functionTypes.has(node.type) && node.body.directives) {
                    const directive = node.body.directives.find((d) => d.rawValue.startsWith('#execute'));
                    if (directive) {
                        let name;
                        if (node.type == 'FunctionDeclaration') {
                            name = node.name.name;
                        }
                        else {
                            const result = directive.rawValue.match(/#execute\[name=(.*)\]/);
                            if (result) {
                                name = result[1];
                            }
                        }
                        const executedFunction = new executedFunction_1.default(node, parent, name);
                        scope.addExecutedFunction(executedFunction);
                        self.executedFunctions.push(executedFunction);
                        if (!self.foundExecutedFunction) {
                            self.foundExecutedFunction = true;
                        }
                    }
                }
                if (self.scopeTypes.has(node.type)) {
                    scope = new scope_1.default(node, scope);
                }
            },
            leave(node) {
                if (node == scope.node && scope.parent) {
                    scope = scope.parent;
                }
            }
        });
    }
    /**
     * Finds aliases for executed functions.
     */
    findAliases() {
        const self = this;
        let scope = this.globalScope;
        traverse_1.traverse(this.ast, {
            enter(node, parent) {
                if (self.scopeTypes.has(node.type)) {
                    scope = scope.children.get(node);
                }
                if (self.isVariableReassignment(node)) {
                    const name = node.init.name;
                    const newName = node.binding.name;
                    const executedFunction = scope.findExecutedFunction(name);
                    if (executedFunction) {
                        scope.addAlias(executedFunction, newName);
                        traversalHelper_1.default.removeNode(parent, node);
                    }
                }
            },
            leave(node) {
                if (node == scope.node && scope.parent) {
                    scope = scope.parent;
                }
            }
        });
    }
    /**
     * Finds and replaces all calls of executed functions.
     */
    replaceFunctionCalls() {
        const self = this;
        let scope = this.globalScope;
        traverse_1.traverse(this.ast, {
            enter(node, parent) {
                if (self.scopeTypes.has(node.type)) {
                    scope = scope.children.get(node);
                }
                if (node.type == 'CallExpression' && node.callee.type == 'IdentifierExpression') {
                    const executedFunction = scope.findExecutedFunction(node.callee.name);
                    if (executedFunction) {
                        const result = executedFunction.getCall(node.arguments);
                        const replacement = self.literalValueToNode(result);
                        if (replacement) {
                            traversalHelper_1.default.replaceNode(parent, node, replacement);
                        }
                        else {
                            executedFunction.failedReplacement = true;
                        }
                    }
                }
            },
            leave(node) {
                if (node == scope.node && scope.parent) {
                    scope = scope.parent;
                }
            }
        });
    }
    /**
     * Attempts to remove all executed functions.
     */
    removeFunctions() {
        for (const func of this.executedFunctions) {
            func.remove();
        }
    }
    /**
     * Attempts to convert a literal value to an AST node.
     * @param value The literal value.
     * @returns The AST node or null.
     */
    literalValueToNode(value) {
        switch (typeof value) {
            case 'string':
                return new Shift.LiteralStringExpression({
                    value: value
                });
            case 'number':
                return new Shift.LiteralNumericExpression({
                    value: value
                });
            case 'boolean':
                return new Shift.LiteralBooleanExpression({
                    value: value
                });
            case 'object': {
                if (value == null) {
                    return new Shift.LiteralNullExpression();
                }
                else if (Array.isArray(value)) {
                    const elements = [];
                    for (let i = 0; i < value.length; i++) {
                        const element = this.literalValueToNode(value[i]);
                        if (element == null) {
                            return null;
                        }
                        elements.push(element);
                    }
                    return new Shift.ArrayExpression({
                        elements
                    });
                }
                else {
                    return null;
                }
            }
            default:
                return null;
        }
    }
    /**
     * Returns whether a node is a variable reassignment.
     * @param node The AST node.
     * @returns Whether.
     */
    isVariableReassignment(node) {
        return (node.type == 'VariableDeclarator' &&
            node.binding.type == 'BindingIdentifier' &&
            node.init != null &&
            node.init.type == 'IdentifierExpression');
    }
}
exports.default = FunctionExecutor;
