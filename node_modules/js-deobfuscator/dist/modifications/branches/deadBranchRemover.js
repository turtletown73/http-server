"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const traversalHelper_1 = __importDefault(require("../../helpers/traversalHelper"));
const traverse_1 = require("../../helpers/traverse");
const modification_1 = __importDefault(require("../../modification"));
class DeadBranchRemover extends modification_1.default {
    /**
     * Creates a new modification.
     * @param ast The AST.
     */
    constructor(ast) {
        super('Dead Branch Remover', ast);
    }
    /**
     * Executes the modification.
     */
    execute() {
        this.removeBranches(this.ast);
    }
    /**
     * Removes dead branches within an AST node.
     * @param node The AST node.
     */
    removeBranches(node) {
        const self = this;
        traverse_1.traverse(node, {
            enter(node, parent) {
                if (self.isFixedIfStatement(node) || self.isFixedConditional(node)) {
                    const branch = node.test.value
                        ? node.consequent
                        : node.alternate;
                    const body = self.getBody(branch);
                    if (body) {
                        self.removeBranches(branch);
                        traversalHelper_1.default.replaceNode(parent, node, body);
                    }
                    else {
                        traversalHelper_1.default.removeNode(parent, node);
                    }
                }
            }
        });
    }
    /**
     * Attempts to get the body from a node, otherwise just returns the
     * node itself.
     * @param node The AST node.
     * @returns The body of the node.
     */
    getBody(node) {
        if (!node) {
            return node;
        }
        return node.type == 'BlockStatement' ? node.block.statements : node;
    }
    /**
     * Returns whether a node is an if statement containing a dead branch.
     * @param node The AST node.
     * @returns Whether.
     */
    isFixedIfStatement(node) {
        return node.type == 'IfStatement' && node.test.type == 'LiteralBooleanExpression';
    }
    /**
     * Returns whether a node is a conditional expression containing a dead
     * branch.
     * @param node The AST node.
     * @returns Whether.
     */
    isFixedConditional(node) {
        return node.type == 'ConditionalExpression' && node.test.type == 'LiteralBooleanExpression';
    }
}
exports.default = DeadBranchRemover;
