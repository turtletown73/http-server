"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deobfuscate = void 0;
const shift_parser_1 = __importDefault(require("shift-parser"));
const shift_codegen_1 = require("shift-codegen");
const proxyRemover_1 = __importDefault(require("./modifications/proxies/proxyRemover"));
const expressionSimplifier_1 = __importDefault(require("./modifications/expressions/expressionSimplifier"));
const arrayUnpacker_1 = __importDefault(require("./modifications/arrays/arrayUnpacker"));
const propertySimplifier_1 = __importDefault(require("./modifications/properties/propertySimplifier"));
const cleanupHelper_1 = __importDefault(require("./helpers/cleanupHelper"));
const variableRenamer_1 = __importDefault(require("./modifications/renaming/variableRenamer"));
const functionExecutor_1 = __importDefault(require("./modifications/execution/functionExecutor"));
const deadBranchRemover_1 = __importDefault(require("./modifications/branches/deadBranchRemover"));
const defaultConfig = {
    verbose: false,
    arrays: {
        unpackArrays: true,
        removeArrays: true
    },
    proxyFunctions: {
        replaceProxyFunctions: true,
        removeProxyFunctions: true
    },
    expressions: {
        simplifyExpressions: true,
        removeDeadBranches: true
    },
    miscellaneous: {
        beautify: true,
        simplifyProperties: true,
        renameHexIdentifiers: false
    }
};
/**
 * Deobfuscates a given source script.
 * @param source The source script.
 * @param config The deobfuscation configuration (optional).
 * @returns The deobfuscated script.
 */
function deobfuscate(source, config = defaultConfig) {
    const ast = shift_parser_1.default(source);
    const modifications = [];
    // function execution should always be checked for
    modifications.push(new functionExecutor_1.default(ast));
    if (config.proxyFunctions.replaceProxyFunctions) {
        modifications.push(new proxyRemover_1.default(ast, config.proxyFunctions.removeProxyFunctions));
    }
    if (config.expressions.simplifyExpressions) {
        modifications.push(new expressionSimplifier_1.default(ast));
    }
    if (config.arrays.unpackArrays) {
        modifications.push(new arrayUnpacker_1.default(ast, config.arrays.removeArrays));
    }
    // simplify any expressions that were revealed by the array unpacking
    if (config.expressions.simplifyExpressions) {
        modifications.push(new expressionSimplifier_1.default(ast));
    }
    if (config.expressions.removeDeadBranches) {
        modifications.push(new deadBranchRemover_1.default(ast));
    }
    if (config.miscellaneous.simplifyProperties) {
        modifications.push(new propertySimplifier_1.default(ast));
    }
    if (config.miscellaneous.renameHexIdentifiers) {
        modifications.push(new variableRenamer_1.default(ast));
    }
    for (const modification of modifications) {
        if (config.verbose) {
            console.log(`[${new Date().toISOString()}]: Executing ${modification.constructor.name}`);
        }
        modification.execute();
    }
    cleanupHelper_1.default.cleanup(ast);
    const output = config.miscellaneous.beautify
        ? shift_codegen_1.codeGen(ast, new shift_codegen_1.FormattedCodeGen())
        : shift_codegen_1.codeGen(ast);
    return output;
}
exports.deobfuscate = deobfuscate;
